name: Workflows generated by the MVS plan
run-name: ${{fromJSON(github.event.inputs.client_payload).payload.job_title}}
on:
  workflow_dispatch:
    inputs:
       client_payload:
          description: The Client payload
          required: true

permissions:
  contents: read
  id-token: write

jobs:
  enrich:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'enrich' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-enrichment-code'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: enrichment
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-enrichment-slim:latest
        
  remediation-pr:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'remediation-pr' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-remediation-pr'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: remediation-pr
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/open-remediation-pr-alpine:latest
        security_control_output_file: /opt/code/jit-report/results.json
        
  software-bill-of-materials:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'software-bill-of-materials' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sbom'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: syft
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-syft-alpine:latest
        fail_if_cannot_checkout: false
        
  static-code-analysis-c-cpp:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-c-cpp' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-csharp:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-csharp' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-go:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-go' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: gosec
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-gosec-alpine:latest
        
  static-code-analysis-java:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-java' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-js:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-js' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-kotlin:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-kotlin' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-php:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-php' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-python-semgrep:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-python-semgrep' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-ruby:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-ruby' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-rust:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-rust' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-scala:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-scala' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        
  static-code-analysis-swift:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'static-code-analysis-swift' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sast'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: semgrep
      uses: jitsecurity-controls/jit-github-action@v4.2.1
      with:
        security_control: registry.jit.io/control-semgrep-alpine:latest
        